# automatically generated by the FlatBuffers compiler, do not modify

# namespace: arlmd

import flatbuffers

class ImageWCS(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsImageWCS(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ImageWCS()
        x.Init(buf, n + offset)
        return x

    # ImageWCS
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ImageWCS
    def Crval(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ImageWCS
    def CrvalAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # ImageWCS
    def CrvalLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ImageWCS
    def Crpix(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ImageWCS
    def CrpixAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # ImageWCS
    def CrpixLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def ImageWCSStart(builder): builder.StartObject(2)
def ImageWCSAddCrval(builder, crval): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(crval), 0)
def ImageWCSStartCrvalVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def ImageWCSAddCrpix(builder, crpix): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(crpix), 0)
def ImageWCSStartCrpixVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def ImageWCSEnd(builder): return builder.EndObject()
